'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.8806
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Almacen"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Almacen
    Inherits Global.System.Data.DataSet
    
    Private tablePEDIDO As PEDIDODataTable
    
    Private tableINGRESO_ALMACEN As INGRESO_ALMACENDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PEDIDO")) Is Nothing) Then
                MyBase.Tables.Add(New PEDIDODataTable(ds.Tables("PEDIDO")))
            End If
            If (Not (ds.Tables("INGRESO_ALMACEN")) Is Nothing) Then
                MyBase.Tables.Add(New INGRESO_ALMACENDataTable(ds.Tables("INGRESO_ALMACEN")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PEDIDO() As PEDIDODataTable
        Get
            Return Me.tablePEDIDO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INGRESO_ALMACEN() As INGRESO_ALMACENDataTable
        Get
            Return Me.tableINGRESO_ALMACEN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Almacen = CType(MyBase.Clone,Almacen)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("PEDIDO")) Is Nothing) Then
                MyBase.Tables.Add(New PEDIDODataTable(ds.Tables("PEDIDO")))
            End If
            If (Not (ds.Tables("INGRESO_ALMACEN")) Is Nothing) Then
                MyBase.Tables.Add(New INGRESO_ALMACENDataTable(ds.Tables("INGRESO_ALMACEN")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePEDIDO = CType(MyBase.Tables("PEDIDO"),PEDIDODataTable)
        If (initTable = true) Then
            If (Not (Me.tablePEDIDO) Is Nothing) Then
                Me.tablePEDIDO.InitVars
            End If
        End If
        Me.tableINGRESO_ALMACEN = CType(MyBase.Tables("INGRESO_ALMACEN"),INGRESO_ALMACENDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINGRESO_ALMACEN) Is Nothing) Then
                Me.tableINGRESO_ALMACEN.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Almacen"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Almacen.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePEDIDO = New PEDIDODataTable
        MyBase.Tables.Add(Me.tablePEDIDO)
        Me.tableINGRESO_ALMACEN = New INGRESO_ALMACENDataTable
        MyBase.Tables.Add(Me.tableINGRESO_ALMACEN)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePEDIDO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeINGRESO_ALMACEN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Almacen = New Almacen
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub PEDIDORowChangeEventHandler(ByVal sender As Object, ByVal e As PEDIDORowChangeEvent)
    
    Public Delegate Sub INGRESO_ALMACENRowChangeEventHandler(ByVal sender As Object, ByVal e As INGRESO_ALMACENRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PEDIDODataTable
        Inherits Global.System.Data.TypedTableBase(Of PEDIDORow)
        
        Private columnAREA As Global.System.Data.DataColumn
        
        Private columnTRABAJADOR As Global.System.Data.DataColumn
        
        Private columnCANTERA As Global.System.Data.DataColumn
        
        Private columnEQUIPO As Global.System.Data.DataColumn
        
        Private columnCOD_PROD As Global.System.Data.DataColumn
        
        Private columnPRODUCTO As Global.System.Data.DataColumn
        
        Private columnCANTIDAD As Global.System.Data.DataColumn
        
        Private columnUNIDAD As Global.System.Data.DataColumn
        
        Private columnUSUARIO As Global.System.Data.DataColumn
        
        Private columnUSERAPRUEBA As Global.System.Data.DataColumn
        
        Private columnFECHA As Global.System.Data.DataColumn
        
        Private columnCODIGO_PEDIDO As Global.System.Data.DataColumn
        
        Private columnCANT_ATENDIDA As Global.System.Data.DataColumn
        
        Private columnUSERAPRUEBAPED As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PEDIDO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRABAJADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRABAJADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANTERAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANTERA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EQUIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEQUIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PRODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PROD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USUARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSUARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USERAPRUEBAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSERAPRUEBA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_PEDIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_PEDIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANT_ATENDIDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANT_ATENDIDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USERAPRUEBAPEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSERAPRUEBAPED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PEDIDORow
            Get
                Return CType(Me.Rows(index),PEDIDORow)
            End Get
        End Property
        
        Public Event PEDIDORowChanging As PEDIDORowChangeEventHandler
        
        Public Event PEDIDORowChanged As PEDIDORowChangeEventHandler
        
        Public Event PEDIDORowDeleting As PEDIDORowChangeEventHandler
        
        Public Event PEDIDORowDeleted As PEDIDORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPEDIDORow(ByVal row As PEDIDORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPEDIDORow(ByVal AREA As String, ByVal TRABAJADOR As String, ByVal CANTERA As String, ByVal EQUIPO As String, ByVal COD_PROD As String, ByVal PRODUCTO As String, ByVal CANTIDAD As String, ByVal UNIDAD As String, ByVal USUARIO As String, ByVal USERAPRUEBA As String, ByVal FECHA As String, ByVal CODIGO_PEDIDO As String, ByVal CANT_ATENDIDA As String, ByVal USERAPRUEBAPED As String) As PEDIDORow
            Dim rowPEDIDORow As PEDIDORow = CType(Me.NewRow,PEDIDORow)
            Dim columnValuesArray() As Object = New Object() {AREA, TRABAJADOR, CANTERA, EQUIPO, COD_PROD, PRODUCTO, CANTIDAD, UNIDAD, USUARIO, USERAPRUEBA, FECHA, CODIGO_PEDIDO, CANT_ATENDIDA, USERAPRUEBAPED}
            rowPEDIDORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPEDIDORow)
            Return rowPEDIDORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PEDIDODataTable = CType(MyBase.Clone,PEDIDODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PEDIDODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAREA = MyBase.Columns("AREA")
            Me.columnTRABAJADOR = MyBase.Columns("TRABAJADOR")
            Me.columnCANTERA = MyBase.Columns("CANTERA")
            Me.columnEQUIPO = MyBase.Columns("EQUIPO")
            Me.columnCOD_PROD = MyBase.Columns("COD_PROD")
            Me.columnPRODUCTO = MyBase.Columns("PRODUCTO")
            Me.columnCANTIDAD = MyBase.Columns("CANTIDAD")
            Me.columnUNIDAD = MyBase.Columns("UNIDAD")
            Me.columnUSUARIO = MyBase.Columns("USUARIO")
            Me.columnUSERAPRUEBA = MyBase.Columns("USERAPRUEBA")
            Me.columnFECHA = MyBase.Columns("FECHA")
            Me.columnCODIGO_PEDIDO = MyBase.Columns("CODIGO_PEDIDO")
            Me.columnCANT_ATENDIDA = MyBase.Columns("CANT_ATENDIDA")
            Me.columnUSERAPRUEBAPED = MyBase.Columns("USERAPRUEBAPED")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAREA = New Global.System.Data.DataColumn("AREA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAREA)
            Me.columnTRABAJADOR = New Global.System.Data.DataColumn("TRABAJADOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRABAJADOR)
            Me.columnCANTERA = New Global.System.Data.DataColumn("CANTERA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTERA)
            Me.columnEQUIPO = New Global.System.Data.DataColumn("EQUIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEQUIPO)
            Me.columnCOD_PROD = New Global.System.Data.DataColumn("COD_PROD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PROD)
            Me.columnPRODUCTO = New Global.System.Data.DataColumn("PRODUCTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTO)
            Me.columnCANTIDAD = New Global.System.Data.DataColumn("CANTIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD)
            Me.columnUNIDAD = New Global.System.Data.DataColumn("UNIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIDAD)
            Me.columnUSUARIO = New Global.System.Data.DataColumn("USUARIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSUARIO)
            Me.columnUSERAPRUEBA = New Global.System.Data.DataColumn("USERAPRUEBA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSERAPRUEBA)
            Me.columnFECHA = New Global.System.Data.DataColumn("FECHA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA)
            Me.columnCODIGO_PEDIDO = New Global.System.Data.DataColumn("CODIGO_PEDIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_PEDIDO)
            Me.columnCANT_ATENDIDA = New Global.System.Data.DataColumn("CANT_ATENDIDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANT_ATENDIDA)
            Me.columnUSERAPRUEBAPED = New Global.System.Data.DataColumn("USERAPRUEBAPED", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSERAPRUEBAPED)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPEDIDORow() As PEDIDORow
            Return CType(Me.NewRow,PEDIDORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PEDIDORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PEDIDORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PEDIDORowChangedEvent) Is Nothing) Then
                RaiseEvent PEDIDORowChanged(Me, New PEDIDORowChangeEvent(CType(e.Row,PEDIDORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PEDIDORowChangingEvent) Is Nothing) Then
                RaiseEvent PEDIDORowChanging(Me, New PEDIDORowChangeEvent(CType(e.Row,PEDIDORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PEDIDORowDeletedEvent) Is Nothing) Then
                RaiseEvent PEDIDORowDeleted(Me, New PEDIDORowChangeEvent(CType(e.Row,PEDIDORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PEDIDORowDeletingEvent) Is Nothing) Then
                RaiseEvent PEDIDORowDeleting(Me, New PEDIDORowChangeEvent(CType(e.Row,PEDIDORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePEDIDORow(ByVal row As PEDIDORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Almacen = New Almacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PEDIDODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INGRESO_ALMACENDataTable
        Inherits Global.System.Data.TypedTableBase(Of INGRESO_ALMACENRow)
        
        Private columnBILLETE As Global.System.Data.DataColumn
        
        Private columnPROVEEDOR As Global.System.Data.DataColumn
        
        Private columnRUC As Global.System.Data.DataColumn
        
        Private columnDOCREF As Global.System.Data.DataColumn
        
        Private columnNROOC As Global.System.Data.DataColumn
        
        Private columnREQUERIMIENTO As Global.System.Data.DataColumn
        
        Private columnFECHA As Global.System.Data.DataColumn
        
        Private columnCOD_PROD As Global.System.Data.DataColumn
        
        Private columnPRODUCTO As Global.System.Data.DataColumn
        
        Private columnUNIDAD As Global.System.Data.DataColumn
        
        Private columnCANTIDAD As Global.System.Data.DataColumn
        
        Private columnRECIBIDO As Global.System.Data.DataColumn
        
        Private columnREVISADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INGRESO_ALMACEN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BILLETEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBILLETE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROVEEDORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROVEEDOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RUCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRUC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOCREFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOCREF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NROOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNROOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REQUERIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREQUERIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PRODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PROD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRODUCTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECIBIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIBIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REVISADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREVISADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INGRESO_ALMACENRow
            Get
                Return CType(Me.Rows(index),INGRESO_ALMACENRow)
            End Get
        End Property
        
        Public Event INGRESO_ALMACENRowChanging As INGRESO_ALMACENRowChangeEventHandler
        
        Public Event INGRESO_ALMACENRowChanged As INGRESO_ALMACENRowChangeEventHandler
        
        Public Event INGRESO_ALMACENRowDeleting As INGRESO_ALMACENRowChangeEventHandler
        
        Public Event INGRESO_ALMACENRowDeleted As INGRESO_ALMACENRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddINGRESO_ALMACENRow(ByVal row As INGRESO_ALMACENRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddINGRESO_ALMACENRow(ByVal BILLETE As String, ByVal PROVEEDOR As String, ByVal RUC As String, ByVal DOCREF As String, ByVal NROOC As String, ByVal REQUERIMIENTO As String, ByVal FECHA As String, ByVal COD_PROD As String, ByVal PRODUCTO As String, ByVal UNIDAD As String, ByVal CANTIDAD As String, ByVal RECIBIDO As String, ByVal REVISADO As String) As INGRESO_ALMACENRow
            Dim rowINGRESO_ALMACENRow As INGRESO_ALMACENRow = CType(Me.NewRow,INGRESO_ALMACENRow)
            Dim columnValuesArray() As Object = New Object() {BILLETE, PROVEEDOR, RUC, DOCREF, NROOC, REQUERIMIENTO, FECHA, COD_PROD, PRODUCTO, UNIDAD, CANTIDAD, RECIBIDO, REVISADO}
            rowINGRESO_ALMACENRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINGRESO_ALMACENRow)
            Return rowINGRESO_ALMACENRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INGRESO_ALMACENDataTable = CType(MyBase.Clone,INGRESO_ALMACENDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INGRESO_ALMACENDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBILLETE = MyBase.Columns("BILLETE")
            Me.columnPROVEEDOR = MyBase.Columns("PROVEEDOR")
            Me.columnRUC = MyBase.Columns("RUC")
            Me.columnDOCREF = MyBase.Columns("DOCREF")
            Me.columnNROOC = MyBase.Columns("NROOC")
            Me.columnREQUERIMIENTO = MyBase.Columns("REQUERIMIENTO")
            Me.columnFECHA = MyBase.Columns("FECHA")
            Me.columnCOD_PROD = MyBase.Columns("COD_PROD")
            Me.columnPRODUCTO = MyBase.Columns("PRODUCTO")
            Me.columnUNIDAD = MyBase.Columns("UNIDAD")
            Me.columnCANTIDAD = MyBase.Columns("CANTIDAD")
            Me.columnRECIBIDO = MyBase.Columns("RECIBIDO")
            Me.columnREVISADO = MyBase.Columns("REVISADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBILLETE = New Global.System.Data.DataColumn("BILLETE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBILLETE)
            Me.columnPROVEEDOR = New Global.System.Data.DataColumn("PROVEEDOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROVEEDOR)
            Me.columnRUC = New Global.System.Data.DataColumn("RUC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUC)
            Me.columnDOCREF = New Global.System.Data.DataColumn("DOCREF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOCREF)
            Me.columnNROOC = New Global.System.Data.DataColumn("NROOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNROOC)
            Me.columnREQUERIMIENTO = New Global.System.Data.DataColumn("REQUERIMIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREQUERIMIENTO)
            Me.columnFECHA = New Global.System.Data.DataColumn("FECHA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA)
            Me.columnCOD_PROD = New Global.System.Data.DataColumn("COD_PROD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PROD)
            Me.columnPRODUCTO = New Global.System.Data.DataColumn("PRODUCTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTO)
            Me.columnUNIDAD = New Global.System.Data.DataColumn("UNIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIDAD)
            Me.columnCANTIDAD = New Global.System.Data.DataColumn("CANTIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD)
            Me.columnRECIBIDO = New Global.System.Data.DataColumn("RECIBIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIBIDO)
            Me.columnREVISADO = New Global.System.Data.DataColumn("REVISADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREVISADO)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewINGRESO_ALMACENRow() As INGRESO_ALMACENRow
            Return CType(Me.NewRow,INGRESO_ALMACENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INGRESO_ALMACENRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INGRESO_ALMACENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INGRESO_ALMACENRowChangedEvent) Is Nothing) Then
                RaiseEvent INGRESO_ALMACENRowChanged(Me, New INGRESO_ALMACENRowChangeEvent(CType(e.Row,INGRESO_ALMACENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INGRESO_ALMACENRowChangingEvent) Is Nothing) Then
                RaiseEvent INGRESO_ALMACENRowChanging(Me, New INGRESO_ALMACENRowChangeEvent(CType(e.Row,INGRESO_ALMACENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INGRESO_ALMACENRowDeletedEvent) Is Nothing) Then
                RaiseEvent INGRESO_ALMACENRowDeleted(Me, New INGRESO_ALMACENRowChangeEvent(CType(e.Row,INGRESO_ALMACENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INGRESO_ALMACENRowDeletingEvent) Is Nothing) Then
                RaiseEvent INGRESO_ALMACENRowDeleting(Me, New INGRESO_ALMACENRowChangeEvent(CType(e.Row,INGRESO_ALMACENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveINGRESO_ALMACENRow(ByVal row As INGRESO_ALMACENRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Almacen = New Almacen
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INGRESO_ALMACENDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PEDIDORow
        Inherits Global.System.Data.DataRow
        
        Private tablePEDIDO As PEDIDODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePEDIDO = CType(Me.Table,PEDIDODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AREA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePEDIDO.AREAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AREA' de la tabla 'PEDIDO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePEDIDO.AREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRABAJADOR() As String
            Get
                Try 
                    Return CType(Me(Me.tablePEDIDO.TRABAJADORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TRABAJADOR' de la tabla 'PEDIDO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePEDIDO.TRABAJADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANTERA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePEDIDO.CANTERAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CANTERA' de la tabla 'PEDIDO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePEDIDO.CANTERAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EQUIPO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePEDIDO.EQUIPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EQUIPO' de la tabla 'PEDIDO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePEDIDO.EQUIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PROD() As String
            Get
                Try 
                    Return CType(Me(Me.tablePEDIDO.COD_PRODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_PROD' de la tabla 'PEDIDO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePEDIDO.COD_PRODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePEDIDO.PRODUCTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRODUCTO' de la tabla 'PEDIDO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePEDIDO.PRODUCTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANTIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tablePEDIDO.CANTIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CANTIDAD' de la tabla 'PEDIDO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePEDIDO.CANTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tablePEDIDO.UNIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNIDAD' de la tabla 'PEDIDO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePEDIDO.UNIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USUARIO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePEDIDO.USUARIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'USUARIO' de la tabla 'PEDIDO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePEDIDO.USUARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USERAPRUEBA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePEDIDO.USERAPRUEBAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'USERAPRUEBA' de la tabla 'PEDIDO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePEDIDO.USERAPRUEBAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePEDIDO.FECHAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA' de la tabla 'PEDIDO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePEDIDO.FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_PEDIDO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePEDIDO.CODIGO_PEDIDOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CODIGO_PEDIDO' de la tabla 'PEDIDO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePEDIDO.CODIGO_PEDIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANT_ATENDIDA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePEDIDO.CANT_ATENDIDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CANT_ATENDIDA' de la tabla 'PEDIDO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePEDIDO.CANT_ATENDIDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USERAPRUEBAPED() As String
            Get
                Try 
                    Return CType(Me(Me.tablePEDIDO.USERAPRUEBAPEDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'USERAPRUEBAPED' de la tabla 'PEDIDO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePEDIDO.USERAPRUEBAPEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAREANull() As Boolean
            Return Me.IsNull(Me.tablePEDIDO.AREAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAREANull()
            Me(Me.tablePEDIDO.AREAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRABAJADORNull() As Boolean
            Return Me.IsNull(Me.tablePEDIDO.TRABAJADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRABAJADORNull()
            Me(Me.tablePEDIDO.TRABAJADORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCANTERANull() As Boolean
            Return Me.IsNull(Me.tablePEDIDO.CANTERAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCANTERANull()
            Me(Me.tablePEDIDO.CANTERAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEQUIPONull() As Boolean
            Return Me.IsNull(Me.tablePEDIDO.EQUIPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEQUIPONull()
            Me(Me.tablePEDIDO.EQUIPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_PRODNull() As Boolean
            Return Me.IsNull(Me.tablePEDIDO.COD_PRODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_PRODNull()
            Me(Me.tablePEDIDO.COD_PRODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRODUCTONull() As Boolean
            Return Me.IsNull(Me.tablePEDIDO.PRODUCTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRODUCTONull()
            Me(Me.tablePEDIDO.PRODUCTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCANTIDADNull() As Boolean
            Return Me.IsNull(Me.tablePEDIDO.CANTIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCANTIDADNull()
            Me(Me.tablePEDIDO.CANTIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIDADNull() As Boolean
            Return Me.IsNull(Me.tablePEDIDO.UNIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIDADNull()
            Me(Me.tablePEDIDO.UNIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSUARIONull() As Boolean
            Return Me.IsNull(Me.tablePEDIDO.USUARIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSUARIONull()
            Me(Me.tablePEDIDO.USUARIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSERAPRUEBANull() As Boolean
            Return Me.IsNull(Me.tablePEDIDO.USERAPRUEBAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSERAPRUEBANull()
            Me(Me.tablePEDIDO.USERAPRUEBAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHANull() As Boolean
            Return Me.IsNull(Me.tablePEDIDO.FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHANull()
            Me(Me.tablePEDIDO.FECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODIGO_PEDIDONull() As Boolean
            Return Me.IsNull(Me.tablePEDIDO.CODIGO_PEDIDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODIGO_PEDIDONull()
            Me(Me.tablePEDIDO.CODIGO_PEDIDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCANT_ATENDIDANull() As Boolean
            Return Me.IsNull(Me.tablePEDIDO.CANT_ATENDIDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCANT_ATENDIDANull()
            Me(Me.tablePEDIDO.CANT_ATENDIDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSERAPRUEBAPEDNull() As Boolean
            Return Me.IsNull(Me.tablePEDIDO.USERAPRUEBAPEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSERAPRUEBAPEDNull()
            Me(Me.tablePEDIDO.USERAPRUEBAPEDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class INGRESO_ALMACENRow
        Inherits Global.System.Data.DataRow
        
        Private tableINGRESO_ALMACEN As INGRESO_ALMACENDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINGRESO_ALMACEN = CType(Me.Table,INGRESO_ALMACENDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BILLETE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINGRESO_ALMACEN.BILLETEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'BILLETE' de la tabla 'INGRESO_ALMACEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINGRESO_ALMACEN.BILLETEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROVEEDOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableINGRESO_ALMACEN.PROVEEDORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PROVEEDOR' de la tabla 'INGRESO_ALMACEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINGRESO_ALMACEN.PROVEEDORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RUC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINGRESO_ALMACEN.RUCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RUC' de la tabla 'INGRESO_ALMACEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINGRESO_ALMACEN.RUCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOCREF() As String
            Get
                Try 
                    Return CType(Me(Me.tableINGRESO_ALMACEN.DOCREFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DOCREF' de la tabla 'INGRESO_ALMACEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINGRESO_ALMACEN.DOCREFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NROOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINGRESO_ALMACEN.NROOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NROOC' de la tabla 'INGRESO_ALMACEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINGRESO_ALMACEN.NROOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REQUERIMIENTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableINGRESO_ALMACEN.REQUERIMIENTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'REQUERIMIENTO' de la tabla 'INGRESO_ALMACEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINGRESO_ALMACEN.REQUERIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA() As String
            Get
                Try 
                    Return CType(Me(Me.tableINGRESO_ALMACEN.FECHAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA' de la tabla 'INGRESO_ALMACEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINGRESO_ALMACEN.FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PROD() As String
            Get
                Try 
                    Return CType(Me(Me.tableINGRESO_ALMACEN.COD_PRODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_PROD' de la tabla 'INGRESO_ALMACEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINGRESO_ALMACEN.COD_PRODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRODUCTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableINGRESO_ALMACEN.PRODUCTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRODUCTO' de la tabla 'INGRESO_ALMACEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINGRESO_ALMACEN.PRODUCTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableINGRESO_ALMACEN.UNIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNIDAD' de la tabla 'INGRESO_ALMACEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINGRESO_ALMACEN.UNIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANTIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableINGRESO_ALMACEN.CANTIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CANTIDAD' de la tabla 'INGRESO_ALMACEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINGRESO_ALMACEN.CANTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECIBIDO() As String
            Get
                Try 
                    Return CType(Me(Me.tableINGRESO_ALMACEN.RECIBIDOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RECIBIDO' de la tabla 'INGRESO_ALMACEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINGRESO_ALMACEN.RECIBIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REVISADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableINGRESO_ALMACEN.REVISADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'REVISADO' de la tabla 'INGRESO_ALMACEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINGRESO_ALMACEN.REVISADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBILLETENull() As Boolean
            Return Me.IsNull(Me.tableINGRESO_ALMACEN.BILLETEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBILLETENull()
            Me(Me.tableINGRESO_ALMACEN.BILLETEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROVEEDORNull() As Boolean
            Return Me.IsNull(Me.tableINGRESO_ALMACEN.PROVEEDORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROVEEDORNull()
            Me(Me.tableINGRESO_ALMACEN.PROVEEDORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRUCNull() As Boolean
            Return Me.IsNull(Me.tableINGRESO_ALMACEN.RUCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRUCNull()
            Me(Me.tableINGRESO_ALMACEN.RUCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOCREFNull() As Boolean
            Return Me.IsNull(Me.tableINGRESO_ALMACEN.DOCREFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOCREFNull()
            Me(Me.tableINGRESO_ALMACEN.DOCREFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNROOCNull() As Boolean
            Return Me.IsNull(Me.tableINGRESO_ALMACEN.NROOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNROOCNull()
            Me(Me.tableINGRESO_ALMACEN.NROOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREQUERIMIENTONull() As Boolean
            Return Me.IsNull(Me.tableINGRESO_ALMACEN.REQUERIMIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREQUERIMIENTONull()
            Me(Me.tableINGRESO_ALMACEN.REQUERIMIENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHANull() As Boolean
            Return Me.IsNull(Me.tableINGRESO_ALMACEN.FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHANull()
            Me(Me.tableINGRESO_ALMACEN.FECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_PRODNull() As Boolean
            Return Me.IsNull(Me.tableINGRESO_ALMACEN.COD_PRODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_PRODNull()
            Me(Me.tableINGRESO_ALMACEN.COD_PRODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRODUCTONull() As Boolean
            Return Me.IsNull(Me.tableINGRESO_ALMACEN.PRODUCTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRODUCTONull()
            Me(Me.tableINGRESO_ALMACEN.PRODUCTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIDADNull() As Boolean
            Return Me.IsNull(Me.tableINGRESO_ALMACEN.UNIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIDADNull()
            Me(Me.tableINGRESO_ALMACEN.UNIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCANTIDADNull() As Boolean
            Return Me.IsNull(Me.tableINGRESO_ALMACEN.CANTIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCANTIDADNull()
            Me(Me.tableINGRESO_ALMACEN.CANTIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECIBIDONull() As Boolean
            Return Me.IsNull(Me.tableINGRESO_ALMACEN.RECIBIDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECIBIDONull()
            Me(Me.tableINGRESO_ALMACEN.RECIBIDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREVISADONull() As Boolean
            Return Me.IsNull(Me.tableINGRESO_ALMACEN.REVISADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREVISADONull()
            Me(Me.tableINGRESO_ALMACEN.REVISADOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PEDIDORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PEDIDORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PEDIDORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PEDIDORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class INGRESO_ALMACENRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INGRESO_ALMACENRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As INGRESO_ALMACENRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As INGRESO_ALMACENRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
