'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5485
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Contratistas"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Contratistas
    Inherits Global.System.Data.DataSet
    
    Private tableRPT_ANTICIPO As RPT_ANTICIPODataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("RPT_ANTICIPO")) Is Nothing) Then
                MyBase.Tables.Add(New RPT_ANTICIPODataTable(ds.Tables("RPT_ANTICIPO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RPT_ANTICIPO() As RPT_ANTICIPODataTable
        Get
            Return Me.tableRPT_ANTICIPO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Contratistas = CType(MyBase.Clone,Contratistas)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("RPT_ANTICIPO")) Is Nothing) Then
                MyBase.Tables.Add(New RPT_ANTICIPODataTable(ds.Tables("RPT_ANTICIPO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableRPT_ANTICIPO = CType(MyBase.Tables("RPT_ANTICIPO"),RPT_ANTICIPODataTable)
        If (initTable = true) Then
            If (Not (Me.tableRPT_ANTICIPO) Is Nothing) Then
                Me.tableRPT_ANTICIPO.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Contratistas"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Contratistas.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableRPT_ANTICIPO = New RPT_ANTICIPODataTable
        MyBase.Tables.Add(Me.tableRPT_ANTICIPO)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRPT_ANTICIPO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Contratistas = New Contratistas
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub RPT_ANTICIPORowChangeEventHandler(ByVal sender As Object, ByVal e As RPT_ANTICIPORowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RPT_ANTICIPODataTable
        Inherits Global.System.Data.TypedTableBase(Of RPT_ANTICIPORow)
        
        Private columnNUMSOLICITUD As Global.System.Data.DataColumn
        
        Private columnAYO As Global.System.Data.DataColumn
        
        Private columnPERIODO As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnFECHACREA As Global.System.Data.DataColumn
        
        Private columnCODCONTRATISTA As Global.System.Data.DataColumn
        
        Private columnCONTRATISTA As Global.System.Data.DataColumn
        
        Private columnCODCANTERA As Global.System.Data.DataColumn
        
        Private columnCANTERA As Global.System.Data.DataColumn
        
        Private columnCONCEPTO As Global.System.Data.DataColumn
        
        Private columnFLAGVARIACION As Global.System.Data.DataColumn
        
        Private columnMONTO As Global.System.Data.DataColumn
        
        Private columnMONEDA As Global.System.Data.DataColumn
        
        Private columnUSERAPRUEBA As Global.System.Data.DataColumn
        
        Private columnUSERCREACION As Global.System.Data.DataColumn
        
        Private columnHORACREA As Global.System.Data.DataColumn
        
        Private columnFECHAAPRUEBA As Global.System.Data.DataColumn
        
        Private columnTIPODEPOBENEFICIARIO As Global.System.Data.DataColumn
        
        Private columnBANCO As Global.System.Data.DataColumn
        
        Private columnBENEFICIARIO As Global.System.Data.DataColumn
        
        Private columnCTABENEFICIARIO As Global.System.Data.DataColumn
        
        Private columnRUC As Global.System.Data.DataColumn
        
        Private columnSALDOANTERIOR As Global.System.Data.DataColumn
        
        Private columnANTICIPOS As Global.System.Data.DataColumn
        
        Private columnFACTURAS As Global.System.Data.DataColumn
        
        Private columnSALDOACTUAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RPT_ANTICIPO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMSOLICITUDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMSOLICITUD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AYOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAYO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PERIODOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERIODO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHACREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHACREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODCONTRATISTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODCONTRATISTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CONTRATISTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONTRATISTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODCANTERAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODCANTERA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANTERAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANTERA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CONCEPTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONCEPTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FLAGVARIACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFLAGVARIACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMONTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USERAPRUEBAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSERAPRUEBA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USERCREACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSERCREACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HORACREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHORACREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAAPRUEBAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHAAPRUEBA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPODEPOBENEFICIARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPODEPOBENEFICIARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BANCOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBANCO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BENEFICIARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBENEFICIARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTABENEFICIARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTABENEFICIARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RUCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRUC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDOANTERIORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDOANTERIOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANTICIPOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANTICIPOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FACTURASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFACTURAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDOACTUALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDOACTUAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RPT_ANTICIPORow
            Get
                Return CType(Me.Rows(index),RPT_ANTICIPORow)
            End Get
        End Property
        
        Public Event RPT_ANTICIPORowChanging As RPT_ANTICIPORowChangeEventHandler
        
        Public Event RPT_ANTICIPORowChanged As RPT_ANTICIPORowChangeEventHandler
        
        Public Event RPT_ANTICIPORowDeleting As RPT_ANTICIPORowChangeEventHandler
        
        Public Event RPT_ANTICIPORowDeleted As RPT_ANTICIPORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRPT_ANTICIPORow(ByVal row As RPT_ANTICIPORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRPT_ANTICIPORow( _
                    ByVal NUMSOLICITUD As String,  _
                    ByVal AYO As Integer,  _
                    ByVal PERIODO As String,  _
                    ByVal DESCRIPCION As String,  _
                    ByVal FECHACREA As Date,  _
                    ByVal CODCONTRATISTA As String,  _
                    ByVal CONTRATISTA As String,  _
                    ByVal CODCANTERA As String,  _
                    ByVal CANTERA As String,  _
                    ByVal CONCEPTO As String,  _
                    ByVal FLAGVARIACION As String,  _
                    ByVal MONTO As Double,  _
                    ByVal MONEDA As String,  _
                    ByVal USERAPRUEBA As String,  _
                    ByVal USERCREACION As String,  _
                    ByVal HORACREA As String,  _
                    ByVal FECHAAPRUEBA As Date,  _
                    ByVal TIPODEPOBENEFICIARIO As String,  _
                    ByVal BANCO As String,  _
                    ByVal BENEFICIARIO As String,  _
                    ByVal CTABENEFICIARIO As String,  _
                    ByVal RUC As String,  _
                    ByVal SALDOANTERIOR As Decimal,  _
                    ByVal ANTICIPOS As Decimal,  _
                    ByVal FACTURAS As Decimal,  _
                    ByVal SALDOACTUAL As Decimal) As RPT_ANTICIPORow
            Dim rowRPT_ANTICIPORow As RPT_ANTICIPORow = CType(Me.NewRow,RPT_ANTICIPORow)
            Dim columnValuesArray() As Object = New Object() {NUMSOLICITUD, AYO, PERIODO, DESCRIPCION, FECHACREA, CODCONTRATISTA, CONTRATISTA, CODCANTERA, CANTERA, CONCEPTO, FLAGVARIACION, MONTO, MONEDA, USERAPRUEBA, USERCREACION, HORACREA, FECHAAPRUEBA, TIPODEPOBENEFICIARIO, BANCO, BENEFICIARIO, CTABENEFICIARIO, RUC, SALDOANTERIOR, ANTICIPOS, FACTURAS, SALDOACTUAL}
            rowRPT_ANTICIPORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRPT_ANTICIPORow)
            Return rowRPT_ANTICIPORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RPT_ANTICIPODataTable = CType(MyBase.Clone,RPT_ANTICIPODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RPT_ANTICIPODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNUMSOLICITUD = MyBase.Columns("NUMSOLICITUD")
            Me.columnAYO = MyBase.Columns("AYO")
            Me.columnPERIODO = MyBase.Columns("PERIODO")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnFECHACREA = MyBase.Columns("FECHACREA")
            Me.columnCODCONTRATISTA = MyBase.Columns("CODCONTRATISTA")
            Me.columnCONTRATISTA = MyBase.Columns("CONTRATISTA")
            Me.columnCODCANTERA = MyBase.Columns("CODCANTERA")
            Me.columnCANTERA = MyBase.Columns("CANTERA")
            Me.columnCONCEPTO = MyBase.Columns("CONCEPTO")
            Me.columnFLAGVARIACION = MyBase.Columns("FLAGVARIACION")
            Me.columnMONTO = MyBase.Columns("MONTO")
            Me.columnMONEDA = MyBase.Columns("MONEDA")
            Me.columnUSERAPRUEBA = MyBase.Columns("USERAPRUEBA")
            Me.columnUSERCREACION = MyBase.Columns("USERCREACION")
            Me.columnHORACREA = MyBase.Columns("HORACREA")
            Me.columnFECHAAPRUEBA = MyBase.Columns("FECHAAPRUEBA")
            Me.columnTIPODEPOBENEFICIARIO = MyBase.Columns("TIPODEPOBENEFICIARIO")
            Me.columnBANCO = MyBase.Columns("BANCO")
            Me.columnBENEFICIARIO = MyBase.Columns("BENEFICIARIO")
            Me.columnCTABENEFICIARIO = MyBase.Columns("CTABENEFICIARIO")
            Me.columnRUC = MyBase.Columns("RUC")
            Me.columnSALDOANTERIOR = MyBase.Columns("SALDOANTERIOR")
            Me.columnANTICIPOS = MyBase.Columns("ANTICIPOS")
            Me.columnFACTURAS = MyBase.Columns("FACTURAS")
            Me.columnSALDOACTUAL = MyBase.Columns("SALDOACTUAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNUMSOLICITUD = New Global.System.Data.DataColumn("NUMSOLICITUD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMSOLICITUD)
            Me.columnAYO = New Global.System.Data.DataColumn("AYO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAYO)
            Me.columnPERIODO = New Global.System.Data.DataColumn("PERIODO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERIODO)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnFECHACREA = New Global.System.Data.DataColumn("FECHACREA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHACREA)
            Me.columnCODCONTRATISTA = New Global.System.Data.DataColumn("CODCONTRATISTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODCONTRATISTA)
            Me.columnCONTRATISTA = New Global.System.Data.DataColumn("CONTRATISTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONTRATISTA)
            Me.columnCODCANTERA = New Global.System.Data.DataColumn("CODCANTERA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODCANTERA)
            Me.columnCANTERA = New Global.System.Data.DataColumn("CANTERA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTERA)
            Me.columnCONCEPTO = New Global.System.Data.DataColumn("CONCEPTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONCEPTO)
            Me.columnFLAGVARIACION = New Global.System.Data.DataColumn("FLAGVARIACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFLAGVARIACION)
            Me.columnMONTO = New Global.System.Data.DataColumn("MONTO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONTO)
            Me.columnMONEDA = New Global.System.Data.DataColumn("MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONEDA)
            Me.columnUSERAPRUEBA = New Global.System.Data.DataColumn("USERAPRUEBA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSERAPRUEBA)
            Me.columnUSERCREACION = New Global.System.Data.DataColumn("USERCREACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSERCREACION)
            Me.columnHORACREA = New Global.System.Data.DataColumn("HORACREA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHORACREA)
            Me.columnFECHAAPRUEBA = New Global.System.Data.DataColumn("FECHAAPRUEBA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHAAPRUEBA)
            Me.columnTIPODEPOBENEFICIARIO = New Global.System.Data.DataColumn("TIPODEPOBENEFICIARIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPODEPOBENEFICIARIO)
            Me.columnBANCO = New Global.System.Data.DataColumn("BANCO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBANCO)
            Me.columnBENEFICIARIO = New Global.System.Data.DataColumn("BENEFICIARIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBENEFICIARIO)
            Me.columnCTABENEFICIARIO = New Global.System.Data.DataColumn("CTABENEFICIARIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTABENEFICIARIO)
            Me.columnRUC = New Global.System.Data.DataColumn("RUC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUC)
            Me.columnSALDOANTERIOR = New Global.System.Data.DataColumn("SALDOANTERIOR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDOANTERIOR)
            Me.columnANTICIPOS = New Global.System.Data.DataColumn("ANTICIPOS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANTICIPOS)
            Me.columnFACTURAS = New Global.System.Data.DataColumn("FACTURAS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFACTURAS)
            Me.columnSALDOACTUAL = New Global.System.Data.DataColumn("SALDOACTUAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDOACTUAL)
            Me.columnNUMSOLICITUD.Caption = "codTrabajador"
            Me.columnAYO.Caption = "nomTrabajador"
            Me.columnPERIODO.Caption = "codArea"
            Me.columnDESCRIPCION.Caption = "Area"
            Me.columnFECHACREA.Caption = "jefeArea"
            Me.columnCODCONTRATISTA.Caption = "Motivo"
            Me.columnCONTRATISTA.Caption = "fecSalida"
            Me.columnCODCANTERA.Caption = "fecRetorno"
            Me.columnCANTERA.Caption = "codCantera"
            Me.columnCONCEPTO.Caption = "Cantera"
            Me.columnFLAGVARIACION.Caption = "Region"
            Me.columnMONTO.Caption = "codConcepto"
            Me.columnMONEDA.Caption = "Concepto"
            Me.columnUSERAPRUEBA.Caption = "monto"
            Me.columnUSERCREACION.Caption = "dias"
            Me.columnHORACREA.Caption = "montoTotal"
            Me.columnFECHAAPRUEBA.Caption = "estado"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRPT_ANTICIPORow() As RPT_ANTICIPORow
            Return CType(Me.NewRow,RPT_ANTICIPORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RPT_ANTICIPORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RPT_ANTICIPORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RPT_ANTICIPORowChangedEvent) Is Nothing) Then
                RaiseEvent RPT_ANTICIPORowChanged(Me, New RPT_ANTICIPORowChangeEvent(CType(e.Row,RPT_ANTICIPORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RPT_ANTICIPORowChangingEvent) Is Nothing) Then
                RaiseEvent RPT_ANTICIPORowChanging(Me, New RPT_ANTICIPORowChangeEvent(CType(e.Row,RPT_ANTICIPORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RPT_ANTICIPORowDeletedEvent) Is Nothing) Then
                RaiseEvent RPT_ANTICIPORowDeleted(Me, New RPT_ANTICIPORowChangeEvent(CType(e.Row,RPT_ANTICIPORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RPT_ANTICIPORowDeletingEvent) Is Nothing) Then
                RaiseEvent RPT_ANTICIPORowDeleting(Me, New RPT_ANTICIPORowChangeEvent(CType(e.Row,RPT_ANTICIPORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRPT_ANTICIPORow(ByVal row As RPT_ANTICIPORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Contratistas = New Contratistas
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RPT_ANTICIPODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RPT_ANTICIPORow
        Inherits Global.System.Data.DataRow
        
        Private tableRPT_ANTICIPO As RPT_ANTICIPODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRPT_ANTICIPO = CType(Me.Table,RPT_ANTICIPODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMSOLICITUD() As String
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.NUMSOLICITUDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NUMSOLICITUD' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.NUMSOLICITUDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AYO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.AYOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AYO' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.AYOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PERIODO() As String
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.PERIODOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PERIODO' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.PERIODOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.DESCRIPCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESCRIPCION' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHACREA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.FECHACREAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHACREA' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.FECHACREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODCONTRATISTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.CODCONTRATISTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CODCONTRATISTA' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.CODCONTRATISTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CONTRATISTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.CONTRATISTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CONTRATISTA' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.CONTRATISTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODCANTERA() As String
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.CODCANTERAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CODCANTERA' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.CODCANTERAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANTERA() As String
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.CANTERAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CANTERA' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.CANTERAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CONCEPTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.CONCEPTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CONCEPTO' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.CONCEPTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FLAGVARIACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.FLAGVARIACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FLAGVARIACION' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.FLAGVARIACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONTO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.MONTOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MONTO' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.MONTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MONEDA' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USERAPRUEBA() As String
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.USERAPRUEBAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'USERAPRUEBA' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.USERAPRUEBAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USERCREACION() As String
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.USERCREACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'USERCREACION' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.USERCREACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HORACREA() As String
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.HORACREAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'HORACREA' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.HORACREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHAAPRUEBA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.FECHAAPRUEBAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHAAPRUEBA' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.FECHAAPRUEBAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPODEPOBENEFICIARIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.TIPODEPOBENEFICIARIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPODEPOBENEFICIARIO' de la tabla 'RPT_ANTICIPO' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.TIPODEPOBENEFICIARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BANCO() As String
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.BANCOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'BANCO' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.BANCOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BENEFICIARIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.BENEFICIARIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'BENEFICIARIO' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.BENEFICIARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTABENEFICIARIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.CTABENEFICIARIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTABENEFICIARIO' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.CTABENEFICIARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RUC() As String
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.RUCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RUC' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.RUCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDOANTERIOR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.SALDOANTERIORColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDOANTERIOR' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.SALDOANTERIORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANTICIPOS() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.ANTICIPOSColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANTICIPOS' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.ANTICIPOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FACTURAS() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.FACTURASColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FACTURAS' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.FACTURASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDOACTUAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRPT_ANTICIPO.SALDOACTUALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDOACTUAL' de la tabla 'RPT_ANTICIPO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRPT_ANTICIPO.SALDOACTUALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMSOLICITUDNull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.NUMSOLICITUDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMSOLICITUDNull()
            Me(Me.tableRPT_ANTICIPO.NUMSOLICITUDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAYONull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.AYOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAYONull()
            Me(Me.tableRPT_ANTICIPO.AYOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPERIODONull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.PERIODOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPERIODONull()
            Me(Me.tableRPT_ANTICIPO.PERIODOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCRIPCIONNull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.DESCRIPCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCRIPCIONNull()
            Me(Me.tableRPT_ANTICIPO.DESCRIPCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHACREANull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.FECHACREAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHACREANull()
            Me(Me.tableRPT_ANTICIPO.FECHACREAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODCONTRATISTANull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.CODCONTRATISTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODCONTRATISTANull()
            Me(Me.tableRPT_ANTICIPO.CODCONTRATISTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCONTRATISTANull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.CONTRATISTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCONTRATISTANull()
            Me(Me.tableRPT_ANTICIPO.CONTRATISTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODCANTERANull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.CODCANTERAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODCANTERANull()
            Me(Me.tableRPT_ANTICIPO.CODCANTERAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCANTERANull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.CANTERAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCANTERANull()
            Me(Me.tableRPT_ANTICIPO.CANTERAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCONCEPTONull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.CONCEPTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCONCEPTONull()
            Me(Me.tableRPT_ANTICIPO.CONCEPTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFLAGVARIACIONNull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.FLAGVARIACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFLAGVARIACIONNull()
            Me(Me.tableRPT_ANTICIPO.FLAGVARIACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONTONull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.MONTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONTONull()
            Me(Me.tableRPT_ANTICIPO.MONTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONEDANull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONEDANull()
            Me(Me.tableRPT_ANTICIPO.MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSERAPRUEBANull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.USERAPRUEBAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSERAPRUEBANull()
            Me(Me.tableRPT_ANTICIPO.USERAPRUEBAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSERCREACIONNull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.USERCREACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSERCREACIONNull()
            Me(Me.tableRPT_ANTICIPO.USERCREACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHORACREANull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.HORACREAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHORACREANull()
            Me(Me.tableRPT_ANTICIPO.HORACREAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHAAPRUEBANull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.FECHAAPRUEBAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHAAPRUEBANull()
            Me(Me.tableRPT_ANTICIPO.FECHAAPRUEBAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPODEPOBENEFICIARIONull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.TIPODEPOBENEFICIARIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPODEPOBENEFICIARIONull()
            Me(Me.tableRPT_ANTICIPO.TIPODEPOBENEFICIARIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBANCONull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.BANCOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBANCONull()
            Me(Me.tableRPT_ANTICIPO.BANCOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBENEFICIARIONull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.BENEFICIARIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBENEFICIARIONull()
            Me(Me.tableRPT_ANTICIPO.BENEFICIARIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTABENEFICIARIONull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.CTABENEFICIARIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTABENEFICIARIONull()
            Me(Me.tableRPT_ANTICIPO.CTABENEFICIARIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRUCNull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.RUCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRUCNull()
            Me(Me.tableRPT_ANTICIPO.RUCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDOANTERIORNull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.SALDOANTERIORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDOANTERIORNull()
            Me(Me.tableRPT_ANTICIPO.SALDOANTERIORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANTICIPOSNull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.ANTICIPOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANTICIPOSNull()
            Me(Me.tableRPT_ANTICIPO.ANTICIPOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFACTURASNull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.FACTURASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFACTURASNull()
            Me(Me.tableRPT_ANTICIPO.FACTURASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDOACTUALNull() As Boolean
            Return Me.IsNull(Me.tableRPT_ANTICIPO.SALDOACTUALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDOACTUALNull()
            Me(Me.tableRPT_ANTICIPO.SALDOACTUALColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RPT_ANTICIPORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RPT_ANTICIPORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RPT_ANTICIPORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RPT_ANTICIPORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
